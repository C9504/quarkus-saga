quarkus.http.port=${APPLICATION_PORT:9000}
#quarkus.datasource.db-kind=postgresql
#quarkus.datasource.jdbc.url=jdbc:postgresql://${DATABASE_HOSTNAME_PSQL:172.17.0.2:5432/negrdo_distributions}
#quarkus.datasource.password=${DATABASE_PASSWORD:admin9504**}
#quarkus.datasource.username=${DATABASE_USERNAME:negrdo}
#quarkus.hibernate-orm.database.generation=${DATABASE_GENERATION:none}
#quarkus.hibernate-orm.log.sql=${DATABASE_LOG_SQL:true}

quarkus.http.cors=${ACTIVE_CORS:true}
quarkus.http.cors.methods=${METHODS:GET, PUT, POST, DELETE}
quarkus.http.cors.origins=${ORIGINS:*}
quarkus.http.cors.exposed-headers=Content-Type,Authorization
quarkus.http.cors.access-control-allow-credentials=${ALLOW_CREDENTIALS:true}

quarkus.console.color=true

kafka.bootstrap.servers=${KAFKA_SERVERS:172.21.0.3:9092}

# Order Events
mp.messaging.incoming.order-created-in.connector=smallrye-kafka
mp.messaging.incoming.order-created-in.topic=quarkus-saga-order-created
mp.messaging.incoming.order-created-in.group.id=quarkus-saga
mp.messaging.incoming.order-created-in.partitions=6
mp.messaging.incoming.order-created-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.order-created-in.value.deserializer=org.c9504.deserializers.OrderDeserializer
mp.messaging.incoming.order-created-in.auto.offset.reset=earliest
mp.messaging.incoming.order-created-in.broadcast=true
#
mp.messaging.outgoing.order-created-out.connector=smallrye-kafka
mp.messaging.outgoing.order-created-out.topic=quarkus-saga-order-created
mp.messaging.outgoing.order-created-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.order-created-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.order-created-out.acks=all
mp.messaging.outgoing.order-created-out.key=true

# Inventory Events
mp.messaging.incoming.inventory-updated-in.connector=smallrye-kafka
mp.messaging.incoming.inventory-updated-in.topic=quarkus-saga-inventory-updated
mp.messaging.incoming.inventory-updated-in.group.id=quarkus-saga
mp.messaging.incoming.inventory-updated-in.partitions=6
mp.messaging.incoming.inventory-updated-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.inventory-updated-in.value.deserializer=org.c9504.deserializers.InventoryDeserializer
mp.messaging.incoming.inventory-updated-in.auto.offset.reset=earliest
mp.messaging.incoming.inventory-updated-in.broadcast=true
#
mp.messaging.outgoing.inventory-updated-out.connector=smallrye-kafka
mp.messaging.outgoing.inventory-updated-out.topic=quarkus-saga-inventory-updated
mp.messaging.outgoing.inventory-updated-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.inventory-updated-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.inventory-updated-out.acks=all
mp.messaging.outgoing.inventory-updated-out.key=true

# Event Email Payment
#mp.messaging.incoming.email-payment-in.connector=smallrye-kafka
#mp.messaging.incoming.email-payment-in.topic=negrdo-distributions-email-payment
#mp.messaging.incoming.email-payment-in.group.id=negrdo-notifications
#mp.messaging.incoming.email-payment-in.partitions=6
#mp.messaging.incoming.email-payment-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
#mp.messaging.incoming.email-payment-in.value.deserializer=org.c9504.deserializers.EmailPaymentSentEventDeserializer
#mp.messaging.incoming.email-payment-in.auto.offset.reset=earliest
#mp.messaging.incoming.email-payment-in.broadcast=true
##
#mp.messaging.outgoing.email-payment-out.connector=smallrye-kafka
#mp.messaging.outgoing.email-payment-out.topic=negrdo-distributions-email-payment
#mp.messaging.outgoing.email-payment-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
#mp.messaging.outgoing.email-payment-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
#mp.messaging.outgoing.email-payment-out.acks=all
#mp.messaging.outgoing.email-payment-out.key=true


# Email Configuration
quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN
quarkus.mailer.username=${ALERT_EMAIL_USERNAME:no-reply@negrdo.com}
quarkus.mailer.trust-all=true
quarkus.mailer.password=${ALERT_EMAIL_PASSWORD:E?qVBdl&NFI2}
quarkus.mailer.host=${ALERT_EMAIL_HOST:mail.negrdo.com}
quarkus.mailer.port=${ALERT_EMAIL_PORT:587}
quarkus.mailer.from=${ALERT_EMAIL_FROM:no-reply@negrdo.com}
quarkus.mailer.start-tls=REQUIRED
#quarkus.mailer.ssl=true
quarkus.mailer.login=REQUIRED
quarkus.mailer.mock=false
quarkus.log.category."io.quarkus.mailer".level=DEBUG

# Telemetry
# OpenTelemetry Configuration
#quarkus.otel.tracer.exporter.otlp.endpoint=${OTLP_ENDPOINT:localhost:4317}
#quarkus.otel.traces.exporter.otlp.headers=${OTLP_HEADERS:}

#Micrometer
#quarkus.micrometer.export.otlp.url=${OTLP_ENDPOINT_URL:http://localhost:4318/api/v1/metrics}
#quarkus.otel.exporter.otlp.traces.protocol=http/protobuf
#quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4318
#
#quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss} %-5p traceId=%X{traceId}} parentId=%X{parentId} spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
#%dev.quarkus.log.console.json=false
#%test.quarkus.log.console.json=false

quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-17
quarkus.native.container-build=true